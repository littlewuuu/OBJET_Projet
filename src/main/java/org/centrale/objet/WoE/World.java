/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.centrale.objet.WoE;

import java.util.Random;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Iterator;
/**
 * The class {@link org.centrale.objet.WoE.World} represents a world that
 * contains different roles like
 * {@code Personnage}({@code Archer},{@code Paysan}, {@code Guerrier}) and
 * {@code Monstre}({@code Lapin}, {@code Loup}), the role {@link Personnage} can
 * attack {@link Monstre} through the method
 * {@link org.centrale.objet.WoE.Guerrier#combattre(org.centrale.objet.WoE.Creature) combattre},
 * it can also restore vitality through the use of {@code PationSoin}.
 *
 * @author wuzilong
 * @author ZouKang
 * @version 1.0
 */
public class World {

    /**
     * The size of the World : TAILLE x TAILLE.
     */
        private final static int TAILLE = 1000;

    /**
     * To identify if a coordinate is occupied, 0 stands for non occupied and 1 stands for occupied.
     * original point is [0,0],the range of X coordinate is [0,TAILLE] and the range for Y coordinate is [0,TAILLE]
     */
    private static final int[][] OCCUPIED = new int[TAILLE + 1][TAILLE + 1];

    /**
     *
     * @param x x-coordinate of the World
     * @param y y-coordinate of the World
     * @return the state of this position[x,y]
     */
    public static int getOCCUPIED(int x, int y) {
        return OCCUPIED[x][y];
    }

    /**
     *
     * @param x x-coordinate of the World
     * @param y y-coordinate of the World
     * @param state 0 or 1; 0:free 1:occupied
     */
    public static void setOCCUPIED(int x, int y, int state) {
        OCCUPIED[x][y] = state;
    }

    /**
     * Representing an {@code Archer}({@code Personnage}) in the world
     */
    public Archer robin;
    /**
     * Representing a Paysan(Personnage) in the world
     */
    public Paysan peon;
    /**
     * Representing a Lain(Monstre) in the world
     */
    public Lapin bugs1;
    /**
     * Representing another Lapin(Monstre) in the world
     */
    public Lapin bugs2; //new attribute
    /**
     * Representing an Archer(Personnage) in the world
     */
    public Archer guillaumeT;
    /**
     * Representing a Guerrier(Personnage) in the world
     */
    public Guerrier grosBill;//new
    /**
     * Representing a Loup(Monstre) in the world
     */
    public Loup wolfie;//new

    public ArrayList<Creature> creatures = new ArrayList<>();
    /**
     * Default parameterless constructor
     */
    public World() {
        
    }

    /**
     *
     */
    public void tourDeJeu() {

    }

    public void aficheWorld() {

    }

    /**
     * Generate a random world with the coordinates of the Creature randomly.
     * generated by {@link java.util.Random}
     */
    public void creerMondeAlea() {
     
        Random generateurAleatoire = new Random(100);
        int nbArchers = 50000;
        for (int i = 0; i < nbArchers; i++) {
            Archer a = new Archer(createPoints());
            creatures.add(a);
        }

        int nbPaysan = generateurAleatoire.nextInt(100);
        for (int i = 0; i < nbPaysan; i++) {
            Paysan a = new Paysan(createPoints());
            creatures.add(a);
        }

        int nbLapin = generateurAleatoire.nextInt(100);
        for (int i = 0; i < nbLapin; i++) {
            Lapin a = new Lapin(createPoints());
            creatures.add(a);
        }

        int nbGuerrier = generateurAleatoire.nextInt(100);
        for (int i = 0; i < nbGuerrier; i++) {
            Guerrier a = new Guerrier(createPoints());
            creatures.add(a);
        }

        int nbLoup = generateurAleatoire.nextInt(100);
        for (int i = 0; i < nbLoup; i++) {
            Loup a = new Loup(createPoints());
            creatures.add(a);
        }

        System.out.println("the number of creature in creatures: " +  creatures.size());
        

        long debut = System.nanoTime();

        int sumPtVie = 0;
        for (int i = 0; i < creatures.size(); i++) {
            sumPtVie += creatures.get(i).getPtVie();
        }
        long fin = System.nanoTime();
        System.out.println("temps ecoule en ns : " + (fin - debut));

        System.out.println("sumPtVie: " + sumPtVie);

        testDeplacement();
//        
//        testTimeArrayList();
//        testTimeLinkedList();
        
    }
    
    /**
     * To test if the function SetPosition of the class Creature works well.
     */
    public void testSetPosition(){
        //TP3 test
        //create some roles
        bugs1 = new Lapin();
        bugs2 = new Lapin();

        robin = new Archer("robin");
        peon = new Paysan("peon");

        grosBill = new Guerrier("grosBill");

        wolfie = new Loup();

        Point2D[] points = {new Point2D(),new Point2D(),new Point2D(),new Point2D(),new Point2D(),new Point2D()};
        
        robin.setPos(points[0]);
        peon.setPos(points[1]);
        bugs1.setPos(points[2]);
        bugs2.setPos(points[3]);
        grosBill.setPos(points[4]);
        wolfie.setPos(points[5]);
        
    }
    
    /**
     * To test if  the function Copie works well.
     */
    public void testCopie(){
        System.out.println("================test copie================");
        guillaumeT = new Archer(robin);
        guillaumeT.setNom("guillaumeT");
        System.out.println("--------------avant-------------");
        guillaumeT.affiche();
        robin.affiche();
        System.out.println("--------------apres-------------");
        robin.deplace();
        guillaumeT.affiche();
        robin.affiche();
        System.out.println("================fin copie================");
    }
    
    /**
     * To test if the function {@code Creature#deplace} of the class Creature works well.
     */
    public void testDeplacement(){
        System.out.println("=============test deplacement: =============");
        System.out.println("persent position:");
        creatures.get(0).affiche();
        System.out.print("state of persent table OCCUPIED [" +creatures.get(0).getPos().getX()+" "+ creatures.get(0).getPos().getY()+"]: ");
        System.out.println(OCCUPIED[creatures.get(0).getPos().getX()][creatures.get(0).getPos().getY()]);
        System.out.print("state of table OCCUPIED to move: ");
        System.out.println(OCCUPIED[creatures.get(0).getPos().getX() + 1][creatures.get(0).getPos().getY() + 1]);

        //We surround the seven directions of A, leaving only one exit 
        creatures.get(1).setPos(new Point2D(creatures.get(0).getPos().getX() + 1, creatures.get(0).getPos().getY()));
        setOCCUPIED(creatures.get(0).getPos().getX() + 1, creatures.get(0).getPos().getY(), 1);
        creatures.get(2).setPos(new Point2D(creatures.get(0).getPos().getX() + 1, creatures.get(0).getPos().getY() - 1));
        setOCCUPIED(creatures.get(0).getPos().getX() + 1, creatures.get(0).getPos().getY() - 1, 1);
        creatures.get(3).setPos(new Point2D(creatures.get(0).getPos().getX(), creatures.get(0).getPos().getY() - 1));
        setOCCUPIED(creatures.get(0).getPos().getX(), creatures.get(0).getPos().getY() - 1, 1);
        creatures.get(4).setPos(new Point2D(creatures.get(0).getPos().getX() - 1, creatures.get(0).getPos().getY() - 1));
        setOCCUPIED(creatures.get(0).getPos().getX() - 1, creatures.get(0).getPos().getY() - 1, 1);
        creatures.get(5).setPos(new Point2D(creatures.get(0).getPos().getX() - 1, creatures.get(0).getPos().getY()));
        setOCCUPIED(creatures.get(0).getPos().getX() - 1, creatures.get(0).getPos().getY(), 1);
        creatures.get(6).setPos(new Point2D(creatures.get(0).getPos().getX() - 1, creatures.get(0).getPos().getY() + 1));
        setOCCUPIED(creatures.get(0).getPos().getX() - 1, creatures.get(0).getPos().getY() + 1, 1);
        creatures.get(7).setPos(new Point2D(creatures.get(0).getPos().getX(), creatures.get(0).getPos().getY() + 1));
        setOCCUPIED(creatures.get(0).getPos().getX(), creatures.get(0).getPos().getY() + 1, 1);
        
        
        creatures.get(0).deplace();

        System.out.print("state of table OCCUPIED original: ");
        System.out.println(OCCUPIED[creatures.get(0).getPos().getX() - 1][creatures.get(0).getPos().getY() - 1]);
        System.out.print("state of table OCCUPIED now: ");
        System.out.println(OCCUPIED[creatures.get(0).getPos().getX()][creatures.get(0).getPos().getY()]);
        System.out.println("position after deplacement:");
        creatures.get(0).affiche();

    }

    /**
     * generate a random Point2D; it can not be a position which was already occupied.
     * @return a instance of Class Point2D which generated by random
     *
     */
    public Point2D createPoints() {
        Random generateurAleatoire = new Random();
        int X;
        int Y;
        while (true) {
            X = generateurAleatoire.nextInt(TAILLE + 1);
            Y = generateurAleatoire.nextInt(TAILLE + 1);
            if (OCCUPIED[X][Y] == 0) {
                OCCUPIED[X][Y] = 1;
                break;
            }
        }
        return new Point2D(X, Y);

    }

    /**
     * generate a random number between 1-5.
     * 1 for Archer, 2 for Paysan, 3 for Lapin, 4 for Guerrier, 5 for Loup.
     * @return a random number
     */
    public int numberRandom() {
        Random generateurAleatoire = new Random();
        return generateurAleatoire.nextInt(5) + 1;
    }

    
    public void testTimeArrayList() {
       
        ArrayList<Creature> creatures = new ArrayList<>();
        
        //test ArrayList with the size 100
        geneArrayList(100,creatures);
        int sumPtVie = 0;
        long debut = System.nanoTime();
        for(int i = 0; i < creatures.size();i++){
            sumPtVie += creatures.get(i).getPtVie();
        }
        long fin = System.nanoTime();
        System.out.println("temps pour[size: 100; \t\tArraryList; \tthrough size] :" + (fin - debut)+"ns");
        creatures.clear();
  
        //test ArrayList with size 1000
        geneArrayList(1000,creatures);
        sumPtVie = 0;
        debut = System.nanoTime();
        for(int i = 0; i < creatures.size();i++){
            sumPtVie += creatures.get(i).getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 1000; \t\tArraryList; \tthrough size] :" + (fin - debut)+"ns");
        creatures.clear();
        
        //test ArrayList with size 10000
        geneArrayList(10000,creatures);
        sumPtVie = 0;
        debut = System.nanoTime();
        for(int i = 0; i < creatures.size();i++){
            sumPtVie += creatures.get(i).getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 10000; \tArraryList; \tthrough size] :" + (fin - debut)+"ns");
        creatures.clear();
        
        //test ArrayList with size 100000
        geneArrayList(100000,creatures);
        sumPtVie = 0;
        debut = System.nanoTime();
        for(int i = 0; i < creatures.size();i++){
            sumPtVie += creatures.get(i).getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 100000; \tArraryList; \tthrough size] :" + (fin - debut)+"ns");
        creatures.clear();
        
        //test ArrayList with size 1000000
        geneArrayList(1000000,creatures);
        sumPtVie = 0;
        debut = System.nanoTime();
        for(int i = 0; i < creatures.size();i++){
            sumPtVie += creatures.get(i).getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 1000000; \tArraryList; \tthrough size] :" + (fin - debut)+"ns");
        creatures.clear();
        
        //test ArrayList with size 100 through iterator
        geneArrayList(100,creatures);
        sumPtVie = 0;
        Iterator<Creature> it = creatures.iterator();
        debut = System.nanoTime();
        while(it.hasNext()){
            Creature c = it.next();
            sumPtVie += c.getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 100; \t\tArraryList; \tthrough iterator] :" + (fin - debut)+"ns");
        creatures.clear();
        
        
        //test ArrayList with size 1000 through iterator
        geneArrayList(1000,creatures);
        sumPtVie = 0;
        it = creatures.iterator();
        debut = System.nanoTime();
        while(it.hasNext()){
            Creature c = it.next();
            sumPtVie += c.getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 1000; \t\tArraryList; \tthrough iterator] :" + (fin - debut)+"ns");
        creatures.clear();
        
        //test ArrayList with size 10000 through iterator
        geneArrayList(10000,creatures);
        sumPtVie = 0;
        it = creatures.iterator();
        debut = System.nanoTime();
        while(it.hasNext()){
            Creature c = it.next();
            sumPtVie += c.getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 10000; \tArraryList; \tthrough iterator] :" + (fin - debut)+"ns");
        creatures.clear();
                
        //test ArrayList with size 100000 through iterator
        geneArrayList(100000,creatures);
        sumPtVie = 0;
        it = creatures.iterator();
        debut = System.nanoTime();
        while(it.hasNext()){
            Creature c = it.next();
            sumPtVie += c.getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 100000; \tArraryList; \tthrough iterator] :" + (fin - debut)+"ns");
        creatures.clear();
                
                        
        //test ArrayList with size 1000000 through iterator
        geneArrayList(1000000,creatures);
        sumPtVie = 0;
        it = creatures.iterator();
        debut = System.nanoTime();
        while(it.hasNext()){
            Creature c = it.next();
            sumPtVie += c.getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 1000000; \tArraryList; \tthrough iterator] :" + (fin - debut)+"ns");
        creatures.clear();
                

    }
    
    

    /**
     * Generate an ArrayList of type Creature.
     * The type of elements it contains is generated by random.
     * @param nbCreature The number of elements we want to generate.
     * @param creatures Save elements to this ArrayList
     */
    public void geneArrayList(int nbCreature, ArrayList<Creature> creatures) {
        int type = numberRandom();
        for (int i = 0; i < nbCreature; i++) {
            switch (type) {
                case 1:
                    Archer archer = new Archer();
                    creatures.add(archer);
                    break;
                case 2:
                    Paysan p = new Paysan();
                    creatures.add(p);
                    break;
                case 3:
                    Lapin l = new Lapin();
                    creatures.add(l);
                    break;
                case 4:
                    Guerrier g = new Guerrier();
                    creatures.add(g);
                    break;
                case 5:
                    Loup lo = new Loup();
                    creatures.add(lo);
                    break;
            }

        }

    }
    
    
    

    public void testTimeLinkedList() {
       
        LinkedList<Creature> creatures = new LinkedList<>();
        
        //test ArrayList with the size 100
        geneLinkedList(100,creatures);
        int sumPtVie = 0;
        long debut = System.nanoTime();
        for(int i = 0; i < creatures.size();i++){
            sumPtVie += creatures.get(i).getPtVie();
        }
        long fin = System.nanoTime();
        System.out.println("temps pour[size: 100; \t\tLinkedList; \tthrough size] :" + (fin - debut)+"ns");
        creatures.clear();
  
        //test ArrayList with size 1000
        geneLinkedList(1000,creatures);
        sumPtVie = 0;
        debut = System.nanoTime();
        for(int i = 0; i < creatures.size();i++){
            sumPtVie += creatures.get(i).getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 1000; \t\tLinkedList; \tthrough size] :" + (fin - debut)+"ns");
        creatures.clear();
        
        //test ArrayList with size 10000
        geneLinkedList(10000,creatures);
        sumPtVie = 0;
        debut = System.nanoTime();
        for(int i = 0; i < creatures.size();i++){
            sumPtVie += creatures.get(i).getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 10000; \tLinkedList; \tthrough size] :" + (fin - debut)+"ns");
        creatures.clear();
        
        //test ArrayList with size 100000
        geneLinkedList(100000,creatures);
        sumPtVie = 0;
        debut = System.nanoTime();
        for(int i = 0; i < creatures.size();i++){
            sumPtVie += creatures.get(i).getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 100000; \tLinkedList; \tthrough size] :" + (fin - debut)+"ns");
        creatures.clear();
        
        //test ArrayList with size 1000000
        geneLinkedList(1000000,creatures);
        sumPtVie = 0;
        debut = System.nanoTime();
        for(int i = 0; i < creatures.size();i++){
            sumPtVie += creatures.get(i).getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 1000000; \tLinkedList; \tthrough size] :" + (fin - debut)+"ns");
        creatures.clear();
        
        //test ArrayList with size 100 through iterator
        geneLinkedList(100,creatures);
        sumPtVie = 0;
        Iterator<Creature> it = creatures.iterator();
        debut = System.nanoTime();
        while(it.hasNext()){
            Creature c = it.next();
            sumPtVie += c.getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 100; \t\tLinkedList; \tthrough iterator] :" + (fin - debut)+"ns");
        creatures.clear();
        
        
        //test ArrayList with size 1000 through iterator
        geneLinkedList(1000,creatures);
        sumPtVie = 0;
        it = creatures.iterator();
        debut = System.nanoTime();
        while(it.hasNext()){
            Creature c = it.next();
            sumPtVie += c.getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 1000; \t\tLinkedList; \tthrough iterator] :" + (fin - debut)+"ns");
        creatures.clear();
        
        //test ArrayList with size 10000 through iterator
        geneLinkedList(10000,creatures);
        sumPtVie = 0;
        it = creatures.iterator();
        debut = System.nanoTime();
        while(it.hasNext()){
            Creature c = it.next();
            sumPtVie += c.getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 10000; \tLinkedList; \tthrough iterator] :" + (fin - debut)+"ns");
        creatures.clear();
                
        //test ArrayList with size 100000 through iterator
        geneLinkedList(100000,creatures);
        sumPtVie = 0;
        it = creatures.iterator();
        debut = System.nanoTime();
        while(it.hasNext()){
            Creature c = it.next();
            sumPtVie += c.getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 100000; \tLinkedList; \tthrough iterator] :" + (fin - debut)+"ns");
        creatures.clear();
                
                        
        //test ArrayList with size 1000000 through iterator
        geneLinkedList(1000000,creatures);
        sumPtVie = 0;
        it = creatures.iterator();
        debut = System.nanoTime();
        while(it.hasNext()){
            Creature c = it.next();
            sumPtVie += c.getPtVie();
        }
        fin = System.nanoTime();
        System.out.println("temps pour[size: 1000000; \tLinkedList; \tthrough iterator] :" + (fin - debut)+"ns");
        creatures.clear();
                

    }
    
    
    
    
    /**
     * Generate a LinkedList of type Creature
     * @param nbCreature The number of elements we want to generate.
     * @param creatures Save elements to this LinkedList.
     */
    public void geneLinkedList(int nbCreature,LinkedList<Creature> creatures) {
        int type = numberRandom();
        for (int i = 0; i < nbCreature; i++) {
            switch (type) {
                case 1:
                    Archer archer = new Archer();
                    creatures.add(archer);
                    break;
                case 2:
                    Paysan p = new Paysan();
                    creatures.add(p);
                    break;
                case 3:
                    Lapin l = new Lapin();
                    creatures.add(l);
                    break;
                case 4:
                    Guerrier g = new Guerrier();
                    creatures.add(g);
                    break;
                case 5:
                    Loup lo = new Loup();
                    creatures.add(lo);
                    break;
            }

        }

    }
    
    
    /**
     * To test if the class PotionSoin works correctly.
     */
    public void testPotion(){
         //Test potion function
        System.out.println("================test potion================");
        robin.setPtVie(70);
        PotionSoin potion1 = new PotionSoin();
        PotionSoin potion2 = new PotionSoin();
        robin.getPotionsoin().add(potion1);
        robin.getPotionsoin().add(potion2);
        robin.affiche();
        System.out.println("nombre de potion de robin: " + robin.getPotionsoin().size());
        System.out.println("consumer 1 potion");
        robin.usagePotion(potion2);
        robin.affiche();
        System.out.println("nombre de potion de robin: " + robin.getPotionsoin().size());
        System.out.println("consumer 1 potion");
        robin.usagePotion(potion1);
        System.out.println("nombre de potion de robin: " + robin.getPotionsoin().size());
        robin.usagePotion(potion1);
        robin.affiche();
        System.out.println("================fin de test potion================");

        
    }
    
    

}
